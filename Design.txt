
CS 495 Introduction to Cryptography Group 2
Group Assignment 1: G2GA1 Cipher

Group Members: Aaron Dutton, Chris Spillers, Cyndi Motley, Sudhir Regmi, Ka Fung
================================================================================

Group2's cipher design for Group Assignment 1 is called the G2GA1 Cipher.

The G2GA1 Cipher is a polygraphic substitution cipher that uses three rounds, 
 three keys, a key derivation function, and a stochastic algorithm to 
 encrypt/decrypt messages.

The G2GA1 Cipher encrypts plaintext (monocase English characters with no 
 punctuation,) by using a dynamically generated lookup matrix.  Each text 
 character is found in the matrix and then represented as an ordered pair 
 (glyphs.)  The glyphs are then encoded back into monocase English and 
 encrypted with the Vigenère Cipher to produce G2GA1 ciphertext.


Requirements:
-------------
- This cipher will use cryptography methods introduced prior to midterm.

- This cipher will defend against cryptanalysis methods introduced prior to 
   midterm.

- This cipher will encrypt and/or decrypt a message of no less than 1kB in less 
   than five minutes in real time under normal server load (solaris.cs.odu.edu).

- This cipher design will not include any binary operations.

- This cipher design will not use any “known hard problems” from modern 
   cryptography.


Features:
---------
- Defends against weaknesses in the Vigenère Cipher (especially weak keys.)

- This cipher uses a multiple keys and key derivation function (KDF) to defend
   against partial discovery of keys.

- This cipher flattens letter frequency distribution to prevent plaintext 
   characterization leaking into the ciphertext.

- This cipher will use a stochastic mapping between the message’s plaintext and
   ordered pairs (glyphs) from the matrix to force any autocorrelation to zero.

- The stochastic mapping also defeat known-plaintext attacks, and certain 
   methods used to implement brute force attacks.


Architecture:
-------------
 - The cipher system consist of three cryptographic primitives:
    1.) Key derivation function.

    2.) Encryption function.
     2.1) Round 1 - Stochastic Plaintext Mapping
     2.1) Round 2 - Coordinate Encoding
     2.1) Round 3 - Vigenère Cipher Encryption

    3.) Decryption function.
     3.1) Round 1 - Vigenère Cipher Decryption
     3.1) Round 2 - Coordinate Decoding
     3.1) Round 3 - Plaintext Lookup

- Ciphertext = G2GA1-Encrypt(plaintext, k1, k2, k3)
    plaintext: a string containing the plaintext to encrypt.
    k1: a string containing the first key,
    k2: an integer containing the second key (0 < k2 <= length of k1).
    k3: a string containing the passphrase used to encrypt the encoded 
         ordered pairs with the Vigenère Cipher.

- Plaintext = G2GA1-Decrypt(ciphertext, k1, k2, k3)
    ciphertext: a string containing the ciphertext to decrypt.
    k1: a string containing the first key,
    k2: an integer containing the second key (0 < k2 <= length of k1).
    k3: a string containing the passphrase used to decrypt the encoded 
         ordered pairs with the Vigenère Cipher.

- All string data is processed in monocase English (no punctuation,) and k3 is 
   input base 16.


Key Derivation Function (KDF)
--------------------------------------------------------------------------------

The G2GA1 KDF is used to generate a dynamic matrix of character indexes from the
 k1 and k2 keys.

The matrix can be described as follows:

- The KDF generates a matrix using the characters from the first key as entries.

- The number of columns in this matrix is equal to the second key.

- The number of rows in this matrix is dependent upon the second key and the 
   length of the message.


Encryption
--------------------------------------------------------------------------------

G2GA1 encryption consists of the following three rounds:


Round 1: “Stochastic Plaintext Mapping”
---------------------------------------

- In round one, the encryption algorithm maps each character from the plaintext 
   message to a glyph (represented as an ordered pair) in the matrix 
   generated by the KDF.

- The actual glyph used is chosen randomly (from the set of ordered pairs that
   represent the letter in the matrix.)

- The mapping functions verifies that each letter from the plaintext has a 
   surjective mapping to the of glyphs.

- Verify that the first key contains at least one occurrence of each character 
   in the alphabet used to create the plaintext. 


Round 2: “Coordinate Encoding”
-------------------------------

- The ordered pairs string from Round 1 will be encoded based on the following
   rules:

  ‘0’ -> ‘A’      ‘5’ -> ‘F’
  ‘1’ -> ‘B’      ‘6’ -> ‘G’
  ‘2’ -> ‘C’      ‘7’ -> ‘H’
  ‘3’ -> ‘D’      ‘8’ -> ‘I’
  ‘4’ -> ‘E’      ‘9’ -> ‘J’

- Encode each element's delimiter, designated by a ',', with by a randomly 
   chosen character from ’K’ to 'Z'.


Round 3: “Vigenere Cipher Encryption"
-------------------------------------

- Round 3 encrypts the encoded ordered pair string generated from Round 2 
   with k3 to produce the resulting ciphertext output for the encryption 
   algorithm.


Decryption
--------------------------------------------------------------------------------

G2GA1 Decryption consists of the following three rounds:


Round 1 - “Vigenere Cipher Decryption”
--------------------------------------

- Round 1 decrypts the ciphertext with the third key, k3, with the Vigenère 
   Cipher to produce the encoded ordered pair string used in Round 2.


Round 2 - “Coordinate Decoding”
-------------------------------

- The encoded ordered pairs string from Round 1 will be decoded based on the 
   following rules:

  ‘A’ -> ‘0’      ‘F’ -> ‘5’
  ‘B’ -> ‘1’      ‘G’ -> ‘6’
  ‘C’ -> ‘2’      ‘H’ -> ‘7’
  ‘D’ -> ‘3’      ‘I’ -> ‘8'
  ‘E’ -> ‘4’      ‘J’ -> ‘9’

- Each element is delimited by a character from ’K’ to 'Z' and should be decoded
   as a ','.


Round 3 - “Plaintext LookUp”
----------------------------

- Round 3 processes the strings of ordered pairs produced by Round 2 to single
   glyphs representing a letter in the matrix.

- Each glyph is mapped to the corresponding letter in the matrix to produced 
   a plaintext letter.

- The plaintext letters are appended to a string which becomes the output of
   the decryption algorithm.
