#!/usr/bin/env php
<?php
require_once('lib/CS495Group2/G2GA1/G2GA1Cipher.php');

use CS495Group2\G2GA1\G2GA1Cipher;

/* Verify arguments and start cipher
============================================================================= */

if ($argc != 6) {
    if ($argc == 1 || in_array(
        $argv[1],
        array('--help', '-help', '-h', '-?'))) {
        printUsage();
    } else {
        printUsageErr('Six arguments are required.');
    }
} else {
    // Hide CLI arguments (including keys) from process title
    setTitle('g2ga1');

    // Perform quick sanity check on args
    verifyArgs($argv);

    // Run cipher
    startCipher($argv);
}


/* Main g2ga1 functions
============================================================================= */

function startCipher($argv)
{
    // Open text file
    $textFile = fopen($argv[1], 'r');
    if (!$textFile) {
        printUsageErr('Unable to open file: ' . $argv[1]);
    }

    // Open k1 file
    $k1File = fopen($argv[2], 'r');
    if (!$k1File) {
        printUsageErr('Unable to open file: ' . $argv[2]);
    }

    // Store text file contents in string
    $text = '';
    while (($textBuffer = fgets($textFile)) !== false) {
        $text .= $textBuffer;
    }
    $text = sanitize($text);

    // Store k1 key file contents in string
    $k1 = '';
    while (($k1Buffer = fgets($k1File)) !== false) {
        $k1 .= $k1Buffer;
    }
    $k1 = sanitize($k1);

    // Set k2 key
    $k2 = hexdec($argv[3]);

    // Set k3 key
    $k3 = sanitize($argv[4]);

    // Set cipher mode
    $mode = sanitize($argv[5]);

    // Encrypt/decrypt based on mode
    if ($mode == 'E') {
        encrypt($text, $k1, $k2, $k3);
    } else {
        decrypt($text, $k1, $k2, $k3);
    }

    echo 'Done.' . PHP_EOL;

    fclose($textFile);
    fclose($k1File);
}

function encrypt($plainText, $k1, $k2, $k3)
{
    setTitle('g2ga1 - encrypting');
    printDesc();

    echo 'Encrypting ...' . PHP_EOL;

    $g2ga1 = new G2GA1Cipher();
    echo $g2ga1->encrypt($plainText, $k1, $k2, $k3);
}

function decrypt($cipherText, $k1, $k2, $k3)
{
    setTitle('g2ga1 - decrypting');
    printDesc();

    echo 'Decrypting ...' . PHP_EOL;

    $g2ga1 = new G2GA1Cipher();
    echo $g2ga1->decrypt($cipherText, $k1, $k2, $k3);
}


/* Helper functions
============================================================================= */

function printUsage()
{
    printDesc();
?>
Usage: g2ga1 <message_file> <k1_file> <k2> <k3> <mode>

  <message_file>   The text file to be encrypted/decrypted.
  <k1_file>        The text file that contains the k1 key.
  <k2>             A numerical (base 16) value for the k2 key.
  <k3>             A string containing the letters for the k3 key.
  <mode>           Either 'E' for encryption, or 'D' for decryption.

Example:
g2ga1 /path/to/message /path/to/k1 C0FFEE SECRET E

<?php
}

function printUsageErr($error)
{
    printUsage();
    die('Error: ' . $error . PHP_EOL);
}

function printDesc()
{
?>

CS 495 - Introduction to Cryptography
Group 2 - Group Assignment 1
G2GA1 Cipher Implementation

<?php
}

function setTitle($title)
{
    $version = explode('.', phpversion());

    // if PHP version is >= 5.5 then attempt to set process title
    if ($version[0] >= 5 && $version[1] >= 5) {
        cli_set_process_title($title);
    }
}

function verifyArgs($argv)
{
    // Verify text files exits
    if (!file_exists($argv[1]))
        printUsageErr('File ' . $argv[1] . ' does not exist.');

    // Verify k1 files exits
    if (!file_exists($argv[2]))
        printUsageErr('File ' . $argv[2] . ' does not exist.');

    // Verify k2 is valid hexadecimal value > 0   
    if (preg_match('/[^A-F0-9]/i', $argv[3]) || hexdec($argv[3]) < 1)
        printUsageErr('k2 must be a hexadeciaml value greater than 0.');

    // Verify k3's length > 0, prevents empty string
    if (!(strlen($argv[4]) > 0))
        printUsageErr('k3 must contain at least one letter.');

    // Verify that the mode is either 'E' or 'D'
    if (preg_match('/[^ED]/i', $argv[5]) || strlen($argv[5]) > 1)
        printUsageErr('Mode must be either \'E\' or \'D\'.');
}

// Remove all non English letters and convert to uppercase
function sanitize($text)
{
    return strtoupper(preg_replace('/[^A-z]/', '', $text));
}
?>